/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 1.3.3
 * Product:       scd30
 * Model-Version: 1.0.0
 */

#include "scd30_i2c.h"
#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

TEST_GROUP (SCD30_Tests) {
    void setup() {
        scd30_init(0x61);
    }
};

TEST (SCD30_Tests, test_stop_periodic_measurement1) {
    int16_t local_error = 0;
    local_error = scd30_stop_periodic_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_periodic_measurement");
}

TEST (SCD30_Tests, test_set_measurement_interval1) {
    int16_t local_error = 0;
    local_error = scd30_set_measurement_interval(4);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_measurement_interval");
}

TEST (SCD30_Tests, test_get_measurement_interval1) {
    int16_t local_error = 0;
    uint16_t interval = 0;
    local_error = scd30_get_measurement_interval(&interval);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_measurement_interval");
    printf("interval: %u\n", interval);
}

TEST (SCD30_Tests, test_set_altitude_compensation1) {
    int16_t local_error = 0;
    local_error = scd30_set_altitude_compensation(440);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_altitude_compensation");
}

TEST (SCD30_Tests, test_get_altitude_compensation1) {
    int16_t local_error = 0;
    uint16_t altitude = 0;
    local_error = scd30_get_altitude_compensation(&altitude);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_altitude_compensation");
    printf("altitude: %u\n", altitude);
}

TEST (SCD30_Tests, test_set_temperature_offset1) {
    int16_t local_error = 0;
    local_error = scd30_set_temperature_offset(2000);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_temperature_offset");
}

TEST (SCD30_Tests, test_get_temperature_offset1) {
    int16_t local_error = 0;
    uint16_t temperature_offset = 0;
    local_error = scd30_get_temperature_offset(&temperature_offset);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_temperature_offset");
    printf("temperature_offset: %u\n", temperature_offset);
}

TEST (SCD30_Tests, test_activate_auto_calibration1) {
    int16_t local_error = 0;
    local_error = scd30_activate_auto_calibration(1);
    CHECK_EQUAL_ZERO_TEXT(local_error, "activate_auto_calibration");
}

TEST (SCD30_Tests, test_get_auto_calibration_status1) {
    int16_t local_error = 0;
    uint16_t is_active = 0;
    local_error = scd30_get_auto_calibration_status(&is_active);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_auto_calibration_status");
    printf("is_active: %u\n", is_active);
}

TEST (SCD30_Tests, test_get_force_recalibration_status1) {
    int16_t local_error = 0;
    uint16_t co2_ref_concentration = 0;
    local_error = scd30_get_force_recalibration_status(&co2_ref_concentration);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_force_recalibration_status");
    printf("co2_ref_concentration: %u\n", co2_ref_concentration);
}

TEST (SCD30_Tests, test_read_firmware_version1) {
    int16_t local_error = 0;
    uint8_t major = 0;
    uint8_t minor = 0;
    local_error = scd30_read_firmware_version(&major, &minor);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_firmware_version");
    printf("major: %u ", major);
    printf("minor: %u\n", minor);
}

TEST (SCD30_Tests, test_soft_reset1) {
    int16_t local_error = 0;
    local_error = scd30_soft_reset();
    CHECK_EQUAL_ZERO_TEXT(local_error, "soft_reset");
}

TEST (SCD30_Tests, test_start_periodic_measurement1) {
    int16_t local_error = 0;
    float co2_concentration = 0.0;
    float temperature = 0.0;
    float humidity = 0.0;
    local_error = scd30_start_periodic_measurement(0);
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_periodic_measurement");
    local_error = scd30_blocking_read_measurement_data(&co2_concentration,
                                                       &temperature, &humidity);
    CHECK_EQUAL_ZERO_TEXT(local_error, "blocking_read_measurement_data");
    printf("co2_concentration: %.2f ", co2_concentration);
    printf("temperature: %.2f ", temperature);
    printf("humidity: %.2f\n", humidity);
    local_error = scd30_force_recalibration(500);
    CHECK_EQUAL_ZERO_TEXT(local_error, "force_recalibration");
    local_error = scd30_await_data_ready();
    CHECK_EQUAL_ZERO_TEXT(local_error, "await_data_ready");
    local_error = scd30_read_measurement_data(&co2_concentration, &temperature,
                                              &humidity);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("co2_concentration: %.2f ", co2_concentration);
    printf("temperature: %.2f ", temperature);
    printf("humidity: %.2f\n", humidity);
    local_error = scd30_stop_periodic_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_periodic_measurement");
}
